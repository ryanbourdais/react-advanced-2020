arrow functions are used when data is passed into functions as arguments and invoking
is used when we dont need to pass an argument
ex:
arrow: const function = (arg) => {} onClick={() => function(arg)}
invoke: const function = () => {} onClick{function}

useState for blank array: const [users, setUsers] = useState([]);

async function:
  const getUsers = async () => {
    const response = await fetch(url);
    const users = await response.json();
    console.log(users);
    setUsers(users);
  };

useEffect that runs only on load:
  useEffect(() => {
    getUsers();
  }, []);

array is for updates that run the useEffect, so if you put users in there the useEffect will run when
users is updated

Mapping:

{objectToBeMapped.map((nameForEachIteration) => {
          const { props } = user;
          return (
            <div key={prop.id}>
              <img src={avatar_url} alt={login} />
              <div>
                <h4>{login}</h4>
                <a href={html_url}>Profile</a>
              </div>
            </div>
          );
        })}

short circuit conditional: {boolean ? if true render : if false render}

ternary operators: 

const firstValue = text || "hello world"; if text is false/empty render "hello world"
const secondValue = text && "hello world"; if text is true/filled render text and "hello world"

example of input taking target value to submit e is for event
<input
    type="text"
    id="firstName"
    name="firstName"
    value={firstName}
    onChange={(e) => {
        setFirstName(e.target.value);
        }}
/>

spread operator used to retain original values as well
use of spread operator:
const person = { firstName, email };
      setPeople((people) => {
        return [...people, person];
      });

 types of useStates:
    const [name, setName] = useState("");
    const [list, setList] = useState([]);
    const [isEditing, setIsEditing] = useState(false);
    const [editId, setEditId] = useState(null);
    const [alert, setAlert] = useState({ show: false, msg: "", type: "" });


    useRef preserves value, DOES NOT trigger re-render, and targets DOM nodes/elements
    because useRef does not rerender we can use it in place of a useEffect and we can use useEffects
    on original render without a dependency array because useRef does not trigger re-render
ex:
const refContainer = useRef(null);

!IMPORTANT!

per Daniel:

You'll very rarely ever use useRef. useRef allows you to access info about a 
component that you wouldn't be able to otherwise, such as the width and height 
of the component. It also allows you to use certain functions on the component, 
such as focus() which puts focus on an input element (like when you left click on
a text field).


const handleSubmit = (e) => {
    e.preventDefault();
    console.log(refContainer.current.value);
    refContainer.current.value = null;
  };

<form className="form" onSubmit={handleSubmit}>
    <input type="text" ref={refContainer} />
</form>

useReducer usage:

reducer.js:

export const reducer = (state, action) => {
  if (action.type === "ADD_ITEM") {
    const newPeople = [...state.people, action.payload];
    return {
      ...state,
      people: newPeople,
      isModalOpen: true,
      modalContent: "value added",
    };}
  throw new Error("no matching action type"); };

index.js:

const defaultState = {
  people: data,
  isModalOpen: false,
  modalContent: "hello world", };

usage: 

const handleSubmit = (e) => {
    e.preventDefault();
    if (name) {
      const newItem = { id: new Date().getTime().toString(), name };
      dispatch({ type: "ADD_ITEM", payload: newItem });
    } else {
      dispatch({ type: "NO_VALUE" });
 }};

<form onSubmit={handleSubmit} className="form">
<button onClick={() => dispatch({ type: "REMOVE_ITEM", payload: person.id })}>
remove
</button>

useContext usage:

const PersonContext = React.createContext();

<PersonContext.Provider value={{ removePerson, people }}>
        <List />
</PersonContext.Provider>

const List = () => {
  const mainData = useContext(PersonContext);
  return (
    <>
      {mainData.people.map((person) => {
        return <SinglePerson key={person.id} {...person} />;
      })}
    </>

const SinglePerson = ({ id, name }) => {
  const { removePerson } = useContext(PersonContext);
  console.log(removePerson);
  return (
    <div className="item">
      <h4>{name}</h4>
      <button onClick={() => removePerson(id)}>remove</button>
    </div>

useContext is used to pass props down to lower levels for use in components
nested in a snippet wrapped with a context provider

array filter usage in an object: 
payload is equal to an id, removes all cartItems with an id matching the payload
{
      ...state,
      cart: state.cart.filter((cartItem) => cartItem.id !== action.payload),
    };

async api call:

 const fetchData = async () => {
    dispatch({ type: "LOADING" });
    const response = await fetch(url);
    const cart = await response.json();
    dispatch({ type: "DISPLAY_ITEMS", payload: cart });
  };

 useEffect(() => {
    fetchData();
  }, []);

if (action.type === "LOADING") {
  return { ...state, loading: true };
}
if (action.type === "DISPLAY_ITEMS") {
  return { ...state, cart: action.payload, loading: false };
}

reducer function with mapping:

if (action.type === "DECREASE") {
    let tempCart = state.cart
      .map((cartItem) => {
        if (cartItem.id === action.payload) {
          return { ...cartItem, amount: cartItem.amount - 1 };
        }
        return cartItem;
      })
      .filter((cartItem) => cartItem.amount !== 0);
    return {
      ...state,
      cart: tempCart,
    };
  }

  adding proptypes to js:

Product.propTypes = {
  image: PropTypes.object.isRequired,
  name: PropTypes.string.isRequired,
  price: PropTypes.number.isRequired,
};
Product.defaultProps = {
  name: "default name",
  price: 3.99,
  image: defaultImage,
};

or operator for object rendering defaults:
 <img src={url || defaultImage} alt={name || "default name"} />
if url DNE then defaultImage is rendered.

Example of React Router:

index.js:

<Router>
      <Navbar />
      <Switch>
        <Route exact path="/">
          <Home />
        </Route>
        <Route path="/About">
          <About />
        </Route>
        <Route path="/People">
          <People />
        </Route>
        <Route path="/person/:id" children={<Person />}></Route>
        <Route path="*">
          <Error />
        </Route>
      </Switch>
</Router>

Navbar.js:
<nav>
      <ul>
        <li>
          <Link to="/">Home</Link>
        </li>
        <li>
          <Link to="/about">About</Link>
        </li>
        <li>
          <Link to="/people">People</Link>
        </li>
      </ul>
</nav>

ex of mapping a link: 

 {people.map((person) => {
        return (
          <div key={person.id} className="item">
            <h4>{person.name}</h4>
            <Link to={`/person/${person.id}`}>Learn More</Link>
          </div>
        );
      })}
      